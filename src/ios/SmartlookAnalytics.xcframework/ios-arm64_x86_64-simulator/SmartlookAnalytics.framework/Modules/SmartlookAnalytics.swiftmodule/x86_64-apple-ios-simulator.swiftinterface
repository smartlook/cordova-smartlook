// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SmartlookAnalytics
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Combine
import CoreData
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
import MapKit
import MetalKit
import QuartzCore
import SceneKit
import SpriteKit
import Swift
import SwiftUI
import UIKit
import Vision
import WebKit
import _Concurrency
import _StringProcessing
import os
public enum Region : Swift.Equatable, Swift.Codable {
  case eu
  case us
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SmartlookAnalytics.Region, b: SmartlookAnalytics.Region) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.Region {
  public static let `default`: SmartlookAnalytics.Region
}
@_hasMissingDesignatedInitializers final public class Properties : Swift.Codable {
  public init()
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.Properties {
  final public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  @discardableResult
  final public func setProperty(_ name: Swift.String, to value: Swift.String?) -> SmartlookAnalytics.Properties
  final public var keys: [Swift.String] {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SLWireframeDataItem) public class WireframeDataItem : ObjectiveC.NSObject {
  @objc public var left: Swift.Double
  @objc public var top: Swift.Double
  @objc public var width: Swift.Double
  @objc public var height: Swift.Double
  @objc public var color: SmartlookAnalytics.PlatformColor?
  @objc override dynamic public init()
  @objc deinit
}
extension SmartlookAnalytics.Smartlook {
  public static var instance: SmartlookAnalytics.Smartlook {
    get
  }
  public static var isInstanceInitialized: Swift.Bool {
    get
  }
}
extension SmartlookAnalytics.RuntimeState : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SmartlookAnalytics.Smartlook {
  final public var eventProperties: SmartlookAnalytics.Properties {
    get
    set
  }
  @discardableResult
  final public func eventProperties(_ properties: SmartlookAnalytics.Properties) -> SmartlookAnalytics.Smartlook
}
extension SmartlookAnalytics.Smartlook {
  @discardableResult
  final public func start() -> SmartlookAnalytics.Smartlook
  @discardableResult
  final public func stop() -> SmartlookAnalytics.Smartlook
}
extension SmartlookAnalytics.Properties : Swift.CustomReflectable, Swift.CustomDebugStringConvertible {
  final public var customMirror: Swift.Mirror {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
extension SmartlookAnalytics.Smartlook {
  final public var recordingMask: SmartlookAnalytics.RecordingMask? {
    get
    set
  }
  @discardableResult
  final public func recordingMask(_ recordingMask: SmartlookAnalytics.RecordingMask?) -> SmartlookAnalytics.Smartlook
}
public enum Status : Swift.Equatable {
  case recording
  case notRecording(SmartlookAnalytics.Status.Cause)
  public enum Cause {
    case notStarted
    case stopped
    case projectLimitReached
    case internalError
    case swiftUIPreviewContext
    case unsupportedPlatform
    case diskCacheCapacityOverreached
    public static func == (a: SmartlookAnalytics.Status.Cause, b: SmartlookAnalytics.Status.Cause) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func == (a: SmartlookAnalytics.Status, b: SmartlookAnalytics.Status) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class RuntimeState : Combine.ObservableObject {
  public var projectKey: Swift.String? {
    get
  }
  public var region: SmartlookAnalytics.Region {
    get
  }
  public var relayProxyHost: Swift.String? {
    get
  }
  @Combine.Published @_projectedValueProperty($status) public var status: SmartlookAnalytics.Status {
    get
  }
  public var $status: Combine.Published<SmartlookAnalytics.Status>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($isRecording) public var isRecording: Swift.Bool {
    get
  }
  public var $isRecording: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  public static let statusDidChangeNotification: Foundation.Notification.Name
  public var framerate: Swift.Int {
    get
  }
  public var usingAdaptiveFramerate: Swift.Bool {
    get
  }
  public var swiftUIPreviewRecordingAllowed: Swift.Bool {
    get
  }
  public var crashReportsEnabled: Swift.Bool {
    get
  }
  @Combine.Published @_projectedValueProperty($renderingMode) public var renderingMode: SmartlookAnalytics.RenderingMode {
    get
  }
  public var $renderingMode: Combine.Published<SmartlookAnalytics.RenderingMode>.Publisher {
    get
  }
  public static let renderingModeDidChangeNotification: Foundation.Notification.Name
  public var eventTracking: SmartlookAnalytics.EventTracking {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Sensitivity {
  public subscript(view: UIKit.UIView) -> Swift.Bool? {
    get
    set
  }
  @discardableResult
  public func set(_ view: UIKit.UIView, _ sensitive: Swift.Bool?) -> SmartlookAnalytics.Sensitivity
  public subscript(viewClass: UIKit.UIView.Type) -> Swift.Bool? {
    get
    set
  }
  @discardableResult
  public func set(_ viewClass: UIKit.UIView.Type, _ sensitive: Swift.Bool?) -> SmartlookAnalytics.Sensitivity
  @objc deinit
}
public struct MaskElement : Swift.Codable, Swift.Equatable {
  public enum MaskType : Swift.Int, Swift.Codable {
    case covering
    case erasing
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let rect: CoreFoundation.CGRect
  public let type: SmartlookAnalytics.MaskElement.MaskType
  public init(rect: CoreFoundation.CGRect, type: SmartlookAnalytics.MaskElement.MaskType = .covering)
  public static func == (a: SmartlookAnalytics.MaskElement, b: SmartlookAnalytics.MaskElement) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RecordingMask : Swift.Codable, Swift.Equatable {
  public var elements: [SmartlookAnalytics.MaskElement]
  public init(elements: [SmartlookAnalytics.MaskElement] = [])
  public static func == (a: SmartlookAnalytics.RecordingMask, b: SmartlookAnalytics.RecordingMask) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.Smartlook {
  @discardableResult
  final public func reset() -> SmartlookAnalytics.Smartlook
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var slSensitive: Swift.Bool? {
    get
    set
  }
}
public struct EventTracking : Swift.Codable, Swift.Equatable {
  public var trackUserInteraction: Swift.Bool
  public var trackNavigation: Swift.Bool
  public var trackRageClicks: Swift.Bool
  public init(trackUserInteraction: Swift.Bool = true, trackNavigation: Swift.Bool = true, trackRageClicks: Swift.Bool = true)
  public static func == (a: SmartlookAnalytics.EventTracking, b: SmartlookAnalytics.EventTracking) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.EventTracking {
  public static let `default`: SmartlookAnalytics.EventTracking
  public static let noTracking: SmartlookAnalytics.EventTracking
}
public enum NavigationEventDirection {
  case enter
  case exit
  public static func == (a: SmartlookAnalytics.NavigationEventDirection, b: SmartlookAnalytics.NavigationEventDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SmartlookAnalytics.Smartlook {
  @discardableResult
  final public func track(event: Swift.String, properties: SmartlookAnalytics.Properties? = nil) -> SmartlookAnalytics.Smartlook
  @discardableResult
  final public func track(navigationEvent: Swift.String, direction: SmartlookAnalytics.NavigationEventDirection? = .enter, properties: SmartlookAnalytics.Properties? = nil) -> SmartlookAnalytics.Smartlook
  @discardableResult
  final public func track(selector: Swift.String, frame: CoreFoundation.CGRect? = nil, properties: SmartlookAnalytics.Properties? = nil) -> SmartlookAnalytics.Smartlook
}
final public class SetupConfiguration : Swift.Codable {
  public init(region: SmartlookAnalytics.Region? = nil, relayProxyHost: Swift.String? = nil)
  final public var region: SmartlookAnalytics.Region? {
    get
    set
  }
  @discardableResult
  final public func region(_ region: SmartlookAnalytics.Region?) -> SmartlookAnalytics.SetupConfiguration
  final public var relayProxyHost: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func relayProxyHost(_ relayProxyHost: Swift.String?) -> SmartlookAnalytics.SetupConfiguration
  final public var crashReportsDisabled: Swift.Bool? {
    get
    set
  }
  @discardableResult
  final public func disableCrashReports() -> SmartlookAnalytics.SetupConfiguration
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.SetupConfiguration : Swift.Equatable {
  public static func == (lhs: SmartlookAnalytics.SetupConfiguration, rhs: SmartlookAnalytics.SetupConfiguration) -> Swift.Bool
}
extension Dispatch.DispatchQueue {
  public func debounceAsync(interval: Dispatch.DispatchTimeInterval, frontlineName: Swift.String, action: @escaping (() -> Swift.Void))
}
@_inheritsConvenienceInitializers @objc(SLFrameworkInfo) final public class FrameworkInfo : ObjectiveC.NSObject {
  @objc final public var framework: Swift.String?
  @objc final public var frameworkVersion: Swift.String?
  @objc final public var frameworkPluginVersion: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class User : Foundation.ObservableObject {
  @discardableResult
  final public func openNew() -> SmartlookAnalytics.User
  final public var identifier: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func identifier(_ identifier: Swift.String) -> SmartlookAnalytics.User
  final public var session: SmartlookAnalytics.Session {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($url) final public var url: Foundation.URL? {
    get
  }
  final public var $url: Combine.Published<Foundation.URL?>.Publisher {
    get
  }
  public static let urlDidChangeNotification: Foundation.Notification.Name
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SmartlookAnalytics.User {
  final public subscript(index: Swift.String) -> Swift.String? {
    get
    set
  }
  @discardableResult
  final public func setProperty(_ property: Swift.String, to value: Swift.String?) -> SmartlookAnalytics.User
  final public var name: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func name(_ name: Swift.String?) -> SmartlookAnalytics.User
  final public var email: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func email(_ email: Swift.String?) -> SmartlookAnalytics.User
}
@_hasMissingDesignatedInitializers final public class Preferences : Swift.Codable {
  final public var projectKey: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func projectKey(_ projectKey: Swift.String) -> SmartlookAnalytics.Preferences
  final public var framerate: Swift.Int? {
    get
    set
  }
  @discardableResult
  final public func framerate(_ framerate: Swift.Int?) -> SmartlookAnalytics.Preferences
  final public var useAdaptiveFramerate: Swift.Bool? {
    get
    set
  }
  @discardableResult
  final public func useAdaptiveFramerate(_ useAdaptiveFramerate: Swift.Bool) -> SmartlookAnalytics.Preferences
  final public var renderingMode: SmartlookAnalytics.RenderingMode? {
    get
    set
  }
  @discardableResult
  final public func renderingMode(_ renderingMode: SmartlookAnalytics.RenderingMode?) -> SmartlookAnalytics.Preferences
  final public var eventTracking: SmartlookAnalytics.EventTracking? {
    get
    set
  }
  @discardableResult
  final public func eventTracking(_ eventTracking: SmartlookAnalytics.EventTracking?) -> SmartlookAnalytics.Preferences
  final public var allowSwiftUIPreviewRecording: Swift.Bool? {
    get
    set
  }
  @discardableResult
  final public func allowSwiftUIPreviewRecording(_ allowSwiftUIPreviewRecording: Swift.Bool?) -> SmartlookAnalytics.Preferences
  final public var `private`: Any? {
    get
    set
  }
  @discardableResult
  final public func `private`(_ privatePreferences: Any?) -> SmartlookAnalytics.Preferences
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.Preferences {
  convenience public init(projectKey: Swift.String? = nil, framerate: Swift.Int? = nil, useAdaptiveFramerate: Swift.Bool? = nil, renderingMode: SmartlookAnalytics.RenderingMode? = nil, eventTracking: SmartlookAnalytics.EventTracking? = nil)
}
infix operator ?+ : AdditionPrecedence
extension SmartlookAnalytics.Smartlook {
  final public var preferences: SmartlookAnalytics.Preferences {
    get
    set
  }
  @discardableResult
  final public func preferences(_ preferences: SmartlookAnalytics.Preferences) -> SmartlookAnalytics.Smartlook
}
extension SmartlookAnalytics.RenderingMode : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SLBridgeInterface) open class BridgeInterface : ObjectiveC.NSObject {
  @objc public var frameworkInfo: SmartlookAnalytics.FrameworkInfo?
  @objc open func obtainFrameworkInfo(completion: @escaping (SmartlookAnalytics.FrameworkInfo?) -> Swift.Void)
  @objc open func obtainWireframeData(completion: @escaping (SmartlookAnalytics.WireframeData?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension SmartlookAnalytics.Smartlook {
  final public func register(bridgeInterface: SmartlookAnalytics.BridgeInterface)
}
public typealias PlatformColor = UIKit.UIColor
@_hasMissingDesignatedInitializers final public class Session : Foundation.ObservableObject {
  @discardableResult
  final public func openNew() -> SmartlookAnalytics.Session
  @Combine.Published @_projectedValueProperty($url) final public var url: Foundation.URL? {
    get
  }
  final public var $url: Combine.Published<Foundation.URL?>.Publisher {
    get
  }
  final public var urlWithTimestamp: Foundation.URL? {
    get
  }
  public static let urlDidChangeNotification: Foundation.Notification.Name
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public enum RenderingMode : Swift.Equatable, Swift.Codable {
  case native
  case wireframe(_: SmartlookAnalytics.RenderingMode.Option? = nil)
  case noRendering
  public enum Option : Swift.Equatable, Swift.Codable {
    @available(*, deprecated, message: "Replaced by `.wireframe()` option in `RenderingMode`. Wireframe no longer has options.")
    case color
    @available(*, deprecated, message: "Removed without replacement. Use the `.wireframe()` rendering mode without option parameter.")
    case blueprint
    @available(*, deprecated, message: "Removed without replacement. Use the `.wireframe()` rendering mode without option parameter.")
    case iconBlueprint
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SmartlookAnalytics.RenderingMode.Option, b: SmartlookAnalytics.RenderingMode.Option) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: Swift.Decoder) throws
  }
  public static func == (a: SmartlookAnalytics.RenderingMode, b: SmartlookAnalytics.RenderingMode) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension SmartlookAnalytics.RenderingMode {
  public static let `default`: SmartlookAnalytics.RenderingMode
}
extension SmartlookAnalytics.RenderingMode.Option {
  @available(*, deprecated, message: "Replaced by `.wireframe()` option in `RenderingMode`.")
  public static let `default`: SmartlookAnalytics.RenderingMode.Option
}
extension SwiftUI.View {
  public func smartlookSensitive(_ sensitive: Swift.Bool = true) -> some SwiftUI.View
  
}
@_hasMissingDesignatedInitializers final public class Smartlook : Combine.ObservableObject {
  final public var state: SmartlookAnalytics.RuntimeState {
    get
  }
  final public var sensitivity: SmartlookAnalytics.Sensitivity {
    get
  }
  final public var user: SmartlookAnalytics.User {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SmartlookAnalytics.Smartlook {
  final public var setupConfiguration: SmartlookAnalytics.SetupConfiguration? {
    get
    set
  }
  @discardableResult
  final public func setupConfiguration(_ setupConfiguration: SmartlookAnalytics.SetupConfiguration?) -> SmartlookAnalytics.Smartlook
}
extension QuartzCore.CATransform3D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension QuartzCore.CATransform3D : Swift.Equatable {
  public static func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
}
public protocol SensitiveData {
}
public protocol NonSensitiveData {
}
@_inheritsConvenienceInitializers @objc(SLWireframeData) public class WireframeData : ObjectiveC.NSObject {
  @objc public var width: Swift.Double
  @objc public var height: Swift.Double
  @objc public var items: [SmartlookAnalytics.WireframeDataItem]
  @objc override dynamic public init()
  @objc deinit
}
extension SmartlookAnalytics.Region : Swift.Hashable {}
extension SmartlookAnalytics.Status.Cause : Swift.Equatable {}
extension SmartlookAnalytics.Status.Cause : Swift.Hashable {}
extension SmartlookAnalytics.MaskElement.MaskType : Swift.Equatable {}
extension SmartlookAnalytics.MaskElement.MaskType : Swift.Hashable {}
extension SmartlookAnalytics.MaskElement.MaskType : Swift.RawRepresentable {}
extension SmartlookAnalytics.NavigationEventDirection : Swift.Equatable {}
extension SmartlookAnalytics.NavigationEventDirection : Swift.Hashable {}
extension SmartlookAnalytics.RenderingMode.Option : Swift.Hashable {}
