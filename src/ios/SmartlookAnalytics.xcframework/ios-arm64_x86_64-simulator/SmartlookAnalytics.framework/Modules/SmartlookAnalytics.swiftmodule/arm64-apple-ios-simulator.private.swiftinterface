// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SmartlookAnalytics
import AVFoundation
import Combine
import CommonCrypto
import CoreData
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
import MapKit
import MetalKit
import QuartzCore
import SceneKit
import Security
import SpriteKit
import Swift
import SwiftUI
import UIKit
import UIKit
import UIKit
import Vision
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public enum Region : Swift.Equatable, Swift.Codable {
  case eu
  case us
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SmartlookAnalytics.Region, b: SmartlookAnalytics.Region) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension SmartlookAnalytics.Region {
  public static let `default`: SmartlookAnalytics.Region
}
@_hasMissingDesignatedInitializers final public class Properties : Swift.Codable {
  public init()
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SmartlookAnalytics.Properties {
  final public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  @discardableResult
  final public func setProperty(_ name: Swift.String, to value: Swift.String?) -> SmartlookAnalytics.Properties
  final public var keys: [Swift.String] {
    get
  }
}
public class HeadersInterceptor : SmartlookAnalytics.NetworkInterceptor {
  public init(allowedHeaders: [Swift.String])
  public func onIntercept(task: Foundation.URLSessionTask, responseData: Foundation.Data?, intercepted: SmartlookAnalytics.InterceptedTaskData?) -> SmartlookAnalytics.InterceptedTaskData?
  @objc deinit
}
@objc(SLBridgeWireframeView) public class BridgeWireframeView : ObjectiveC.NSObject {
  @objc(identifier) public var id: Swift.String
  @objc public var name: Swift.String?
  @objc public var typeName: Swift.String
  @objc public var type: SmartlookAnalytics.SubviewType
  @objc public var rect: CoreFoundation.CGRect
  @objc public var offset: CoreFoundation.CGPoint
  @objc public var alpha: CoreFoundation.CGFloat
  @objc(isFocused) public var focus: Swift.Bool
  @objc(isSensitive) public var sensitive: Swift.Bool
  @objc public var skeletons: [SmartlookAnalytics.BridgeWireframeSkeleton]?
  @objc public var foregroundSkeletons: [SmartlookAnalytics.BridgeWireframeSkeleton]?
  @objc public var subviews: [SmartlookAnalytics.BridgeWireframeView]?
  public init(id: Swift.String, name: Swift.String? = nil, typeName: Swift.String, type: SmartlookAnalytics.SubviewType = .undefined, rect: CoreFoundation.CGRect, offset: CoreFoundation.CGPoint = .zero, alpha: CoreFoundation.CGFloat = 1, focus: Swift.Bool = false, sensitive: Swift.Bool = false, skeletons: [SmartlookAnalytics.BridgeWireframeSkeleton]? = nil, foregroundSkeletons: [SmartlookAnalytics.BridgeWireframeSkeleton]? = nil, subviews: [SmartlookAnalytics.BridgeWireframeView]? = nil)
  @available(swift, obsoleted: 0.1)
  @objc convenience public init(id: Swift.String, typeName: Swift.String, rect: CoreFoundation.CGRect)
  @objc deinit
}
extension SmartlookAnalytics.Smartlook {
  public static var instance: SmartlookAnalytics.Smartlook {
    get
  }
  public static var isInstanceInitialized: Swift.Bool {
    get
  }
}
extension SmartlookAnalytics.RuntimeState : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
extension SmartlookAnalytics.Smartlook {
  final public var eventProperties: SmartlookAnalytics.Properties {
    get
    set
  }
  @discardableResult
  final public func eventProperties(_ properties: SmartlookAnalytics.Properties) -> SmartlookAnalytics.Smartlook
}
public class MaskUrlInterceptor : SmartlookAnalytics.NetworkInterceptor {
  required public init(masks: [SmartlookAnalytics.InterceptorMask])
  public func onIntercept(task: Foundation.URLSessionTask, responseData: Foundation.Data?, intercepted: SmartlookAnalytics.InterceptedTaskData?) -> SmartlookAnalytics.InterceptedTaskData?
  @objc deinit
}
extension SmartlookAnalytics.Smartlook {
  @discardableResult
  final public func start() -> SmartlookAnalytics.Smartlook
  @discardableResult
  final public func stop() -> SmartlookAnalytics.Smartlook
}
extension SmartlookAnalytics.Properties : Swift.CustomReflectable, Swift.CustomDebugStringConvertible {
  final public var customMirror: Swift.Mirror {
    get
  }
  final public var debugDescription: Swift.String {
    get
  }
}
extension SmartlookAnalytics.CrashReportsBridge {
  public func crashes() -> [Foundation.Date : Foundation.URL]?
  public func crashes(at folder: Foundation.URL? = nil, in range: Swift.Range<Foundation.Date>? = nil) -> [Foundation.Date : Foundation.URL]?
}
extension SmartlookAnalytics.RenderingMode : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
public struct InterceptedTaskData {
  public var start: Swift.Double
  public var url: Swift.String?
  public var duration: Swift.Double?
  public var method: Swift.String?
  public var requestHeaders: [Swift.String : Swift.String]?
  public var responseHeaders: [Swift.String : Swift.String]?
  public var httpProtocol: Swift.String?
  public var initiator: Swift.String?
  public var status: Swift.String?
  public var statusCode: Swift.Int?
  public var cached: Swift.Bool?
  public var requestBody: Swift.String?
  public var responseBody: Swift.String?
  public init(start: Swift.Double = Date().timeIntervalSince1970, url: Swift.String? = nil, duration: Swift.Double? = nil, method: Swift.String? = nil, requestHeaders: [Swift.String : Swift.String]? = nil, responseHeaders: [Swift.String : Swift.String]? = nil, httpProtocol: Swift.String? = nil, initiator: Swift.String? = nil, status: Swift.String? = nil, statusCode: Swift.Int? = nil, cached: Swift.Bool? = nil, requestBody: Swift.String? = nil, responseBody: Swift.String? = nil)
}
extension SmartlookAnalytics.Smartlook {
  final public var recordingMask: SmartlookAnalytics.RecordingMask? {
    get
    set
  }
  @discardableResult
  final public func recordingMask(_ recordingMask: SmartlookAnalytics.RecordingMask?) -> SmartlookAnalytics.Smartlook
}
public enum Status : Swift.Equatable {
  case recording
  case notRecording(SmartlookAnalytics.Status.Cause)
  public enum Cause {
    case notStarted
    case stopped
    case projectLimitReached
    case internalError
    case swiftUIPreviewContext
    case unsupportedPlatform
    case diskCacheCapacityOverreached
    public static func == (a: SmartlookAnalytics.Status.Cause, b: SmartlookAnalytics.Status.Cause) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func == (a: SmartlookAnalytics.Status, b: SmartlookAnalytics.Status) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class RuntimeState : Combine.ObservableObject {
  public var projectKey: Swift.String? {
    get
  }
  public var region: SmartlookAnalytics.Region {
    get
  }
  public var relayProxyHost: Swift.String? {
    get
  }
  @Combine.Published @_projectedValueProperty($status) public var status: SmartlookAnalytics.Status {
    get
  }
  public var $status: Combine.Published<SmartlookAnalytics.Status>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($isRecording) public var isRecording: Swift.Bool {
    get
  }
  public var $isRecording: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  public static let statusDidChangeNotification: Foundation.Notification.Name
  public var framerate: Swift.Int {
    get
  }
  public var usingAdaptiveFramerate: Swift.Bool {
    get
  }
  public var swiftUIPreviewRecordingAllowed: Swift.Bool {
    get
  }
  public var crashReportsEnabled: Swift.Bool {
    get
  }
  @Combine.Published @_projectedValueProperty($renderingMode) public var renderingMode: SmartlookAnalytics.RenderingMode {
    get
  }
  public var $renderingMode: Combine.Published<SmartlookAnalytics.RenderingMode>.Publisher {
    get
  }
  public static let renderingModeDidChangeNotification: Foundation.Notification.Name
  public var eventTracking: SmartlookAnalytics.EventTracking {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Sensitivity {
  public subscript(view: UIKit.UIView) -> Swift.Bool? {
    get
    set
  }
  @discardableResult
  public func set(_ view: UIKit.UIView, _ sensitive: Swift.Bool?) -> SmartlookAnalytics.Sensitivity
  public subscript(viewClass: UIKit.UIView.Type) -> Swift.Bool? {
    get
    set
  }
  @discardableResult
  public func set(_ viewClass: UIKit.UIView.Type, _ sensitive: Swift.Bool?) -> SmartlookAnalytics.Sensitivity
  @objc deinit
}
extension Dispatch.DispatchTimeInterval : Swift.Comparable {
  public static func < (lhs: Dispatch.DispatchTimeInterval, rhs: Dispatch.DispatchTimeInterval) -> Swift.Bool
}
extension SmartlookAnalytics.Smartlook {
  final public func track(interceptedEvent: SmartlookAnalytics.InterceptedTaskData)
}
public struct MaskElement : Swift.Codable, Swift.Equatable {
  public enum MaskType : Swift.Int, Swift.Codable {
    case covering
    case erasing
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let rect: CoreFoundation.CGRect
  public let type: SmartlookAnalytics.MaskElement.MaskType
  public init(rect: CoreFoundation.CGRect, type: SmartlookAnalytics.MaskElement.MaskType = .covering)
  public static func == (a: SmartlookAnalytics.MaskElement, b: SmartlookAnalytics.MaskElement) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RecordingMask : Swift.Codable, Swift.Equatable {
  public var elements: [SmartlookAnalytics.MaskElement]
  public init(elements: [SmartlookAnalytics.MaskElement] = [])
  public static func == (a: SmartlookAnalytics.RecordingMask, b: SmartlookAnalytics.RecordingMask) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc(SLSkeletonType) public enum SkeletonType : Swift.Int, Swift.Codable {
  case undefined
  case text
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc(SLBridgeWireframeSkeleton) public class BridgeWireframeSkeleton : ObjectiveC.NSObject {
  @objc public var type: SmartlookAnalytics.SkeletonType
  @objc public var rect: CoreFoundation.CGRect
  @objc public var radius: Swift.Int
  @objc public var alpha: CoreFoundation.CGFloat
  @objc public var color: Swift.String
  @objc public var flags: SmartlookAnalytics.BridgeWireframeSkeletonFlags?
  public init(type: SmartlookAnalytics.SkeletonType = .undefined, rect: CoreFoundation.CGRect, radius: Swift.Int = 0, alpha: CoreFoundation.CGFloat = 1, color: Swift.String, flags: SmartlookAnalytics.BridgeWireframeSkeletonFlags? = nil)
  @available(swift, obsoleted: 0.1)
  @objc convenience public init(rect: CoreFoundation.CGRect, color: Swift.String)
  @objc deinit
}
extension SmartlookAnalytics.Smartlook {
  @discardableResult
  final public func reset() -> SmartlookAnalytics.Smartlook
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var slSensitive: Swift.Bool? {
    get
    set
  }
}
public struct EventTracking : Swift.Codable, Swift.Equatable {
  public var trackUserInteraction: Swift.Bool
  public var trackNavigation: Swift.Bool
  public var trackRageClicks: Swift.Bool
  public init(trackUserInteraction: Swift.Bool = true, trackNavigation: Swift.Bool = true, trackRageClicks: Swift.Bool = true)
  public static func == (a: SmartlookAnalytics.EventTracking, b: SmartlookAnalytics.EventTracking) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SmartlookAnalytics.EventTracking {
  public static let `default`: SmartlookAnalytics.EventTracking
  public static let noTracking: SmartlookAnalytics.EventTracking
}
public enum NavigationEventDirection {
  case enter
  case exit
  public static func == (a: SmartlookAnalytics.NavigationEventDirection, b: SmartlookAnalytics.NavigationEventDirection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SmartlookAnalytics.Smartlook {
  @discardableResult
  final public func track(event: Swift.String, properties: SmartlookAnalytics.Properties? = nil) -> SmartlookAnalytics.Smartlook
  @discardableResult
  final public func track(navigationEvent: Swift.String, direction: SmartlookAnalytics.NavigationEventDirection? = .enter, properties: SmartlookAnalytics.Properties? = nil) -> SmartlookAnalytics.Smartlook
  @discardableResult
  final public func track(selector: Swift.String, frame: CoreFoundation.CGRect? = nil, properties: SmartlookAnalytics.Properties? = nil) -> SmartlookAnalytics.Smartlook
}
final public class SetupConfiguration : Swift.Codable {
  public init(region: SmartlookAnalytics.Region? = nil, relayProxyHost: Swift.String? = nil)
  final public var region: SmartlookAnalytics.Region? {
    get
    set
  }
  @discardableResult
  final public func region(_ region: SmartlookAnalytics.Region?) -> SmartlookAnalytics.SetupConfiguration
  final public var relayProxyHost: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func relayProxyHost(_ relayProxyHost: Swift.String?) -> SmartlookAnalytics.SetupConfiguration
  final public var crashReportsDisabled: Swift.Bool? {
    get
    set
  }
  @discardableResult
  final public func disableCrashReports() -> SmartlookAnalytics.SetupConfiguration
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SmartlookAnalytics.SetupConfiguration : Swift.Equatable {
  public static func == (lhs: SmartlookAnalytics.SetupConfiguration, rhs: SmartlookAnalytics.SetupConfiguration) -> Swift.Bool
}
public struct InterceptorMask {
  public init(regex: Swift.String, mask: Swift.String = "<hidden>")
}
public class NonBinaryBodyInterceptor : SmartlookAnalytics.NetworkInterceptor {
  public init()
  public func onIntercept(task: Foundation.URLSessionTask, responseData: Foundation.Data?, intercepted: SmartlookAnalytics.InterceptedTaskData?) -> SmartlookAnalytics.InterceptedTaskData?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SLFrameworkInfo) final public class FrameworkInfo : ObjectiveC.NSObject {
  @objc final public var framework: Swift.String?
  @objc final public var frameworkVersion: Swift.String?
  @objc final public var frameworkPluginVersion: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class User : Foundation.ObservableObject {
  @discardableResult
  final public func openNew() -> SmartlookAnalytics.User
  final public var identifier: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func identifier(_ identifier: Swift.String) -> SmartlookAnalytics.User
  final public var session: SmartlookAnalytics.Session {
    get
    set
  }
  @Combine.Published @_projectedValueProperty($url) final public var url: Foundation.URL? {
    get
  }
  final public var $url: Combine.Published<Foundation.URL?>.Publisher {
    get
  }
  public static let urlDidChangeNotification: Foundation.Notification.Name
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension SmartlookAnalytics.User {
  final public subscript(index: Swift.String) -> Swift.String? {
    get
    set
  }
  @discardableResult
  final public func setProperty(_ property: Swift.String, to value: Swift.String?) -> SmartlookAnalytics.User
  final public var name: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func name(_ name: Swift.String?) -> SmartlookAnalytics.User
  final public var email: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func email(_ email: Swift.String?) -> SmartlookAnalytics.User
}
@objc(SLSubviewType) public enum SubviewType : Swift.Int, Swift.Codable {
  case undefined
  case text
  case image
  case area
  case dimming
  case visualEffect
  case webView
  case map
  case tabBar
  case popover
  case datePicker
  case timePicker
  case progress
  case spinningWheel
  case video
  case surface
  case button
  case spinner
  case ad
  case chip
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class Preferences : Swift.Codable {
  final public var projectKey: Swift.String? {
    get
    set
  }
  @discardableResult
  final public func projectKey(_ projectKey: Swift.String) -> SmartlookAnalytics.Preferences
  final public var framerate: Swift.Int? {
    get
    set
  }
  @discardableResult
  final public func framerate(_ framerate: Swift.Int?) -> SmartlookAnalytics.Preferences
  final public var useAdaptiveFramerate: Swift.Bool? {
    get
    set
  }
  @discardableResult
  final public func useAdaptiveFramerate(_ useAdaptiveFramerate: Swift.Bool) -> SmartlookAnalytics.Preferences
  final public var renderingMode: SmartlookAnalytics.RenderingMode? {
    get
    set
  }
  @discardableResult
  final public func renderingMode(_ renderingMode: SmartlookAnalytics.RenderingMode?) -> SmartlookAnalytics.Preferences
  final public var eventTracking: SmartlookAnalytics.EventTracking? {
    get
    set
  }
  @discardableResult
  final public func eventTracking(_ eventTracking: SmartlookAnalytics.EventTracking?) -> SmartlookAnalytics.Preferences
  final public var allowSwiftUIPreviewRecording: Swift.Bool? {
    get
    set
  }
  @discardableResult
  final public func allowSwiftUIPreviewRecording(_ allowSwiftUIPreviewRecording: Swift.Bool?) -> SmartlookAnalytics.Preferences
  final public var `private`: Any? {
    get
    set
  }
  @discardableResult
  final public func `private`(_ privatePreferences: Any?) -> SmartlookAnalytics.Preferences
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SmartlookAnalytics.Preferences {
  convenience public init(projectKey: Swift.String? = nil, framerate: Swift.Int? = nil, useAdaptiveFramerate: Swift.Bool? = nil, renderingMode: SmartlookAnalytics.RenderingMode? = nil, eventTracking: SmartlookAnalytics.EventTracking? = nil)
}
infix operator ?+ : AdditionPrecedence
extension SmartlookAnalytics.Smartlook {
  final public var preferences: SmartlookAnalytics.Preferences {
    get
    set
  }
  @discardableResult
  final public func preferences(_ preferences: SmartlookAnalytics.Preferences) -> SmartlookAnalytics.Smartlook
}
@objc(SLBridgeInterface) public protocol BridgeInterface : ObjectiveC.NSObjectProtocol {
  @objc var frameworkInfo: SmartlookAnalytics.FrameworkInfo? { get set }
  @objc func obtainFrameworkInfo(completion: @escaping (SmartlookAnalytics.FrameworkInfo?) -> Swift.Void)
  @objc func obtainWireframeRootClasses(completion: @escaping ([Swift.String]) -> Swift.Void)
  @objc func obtainWireframeData(identifier: Any?, completion: @escaping (SmartlookAnalytics.BridgeWireframe?) -> Swift.Void)
  @objc var recordingAllowed: Swift.Bool { get }
}
extension SmartlookAnalytics.Smartlook {
  final public func register(bridgeInterface: any SmartlookAnalytics.BridgeInterface) -> Swift.Bool
  final public func unregister(bridgeInterface: any SmartlookAnalytics.BridgeInterface) -> Swift.Bool
}
extension Foundation.NSException : @unchecked Swift.Sendable {
}
public struct ExceptionError : Swift.Error {
  public let exception: Foundation.NSException
  public var localizedDescription: Swift.String {
    get
  }
}
public func executeNSExceptionRaising(block: @escaping () -> Swift.Void) throws
public func executeNSExceptionRaising(block: @escaping () throws -> Swift.Void) throws
@_hasMissingDesignatedInitializers final public class Session : Foundation.ObservableObject {
  @discardableResult
  final public func openNew() -> SmartlookAnalytics.Session
  @Combine.Published @_projectedValueProperty($url) final public var url: Foundation.URL? {
    get
  }
  final public var $url: Combine.Published<Foundation.URL?>.Publisher {
    get
  }
  final public var urlWithTimestamp: Foundation.URL? {
    get
  }
  public static let urlDidChangeNotification: Foundation.Notification.Name
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol NetworkInterceptor {
  func onIntercept(task: Foundation.URLSessionTask, responseData: Foundation.Data?, intercepted: SmartlookAnalytics.InterceptedTaskData?) -> SmartlookAnalytics.InterceptedTaskData?
}
public enum RenderingMode : Swift.Equatable, Swift.Codable {
  case native
  case wireframe(_: SmartlookAnalytics.RenderingMode.Option? = nil)
  case noRendering
  public enum Option : Swift.Equatable, Swift.Codable {
    @available(*, deprecated, message: "Replaced by `.wireframe()` option in `RenderingMode`. Wireframe no longer has options.")
    case color
    @available(*, deprecated, message: "Removed without replacement. Use the `.wireframe()` rendering mode without option parameter.")
    case blueprint
    @available(*, deprecated, message: "Removed without replacement. Use the `.wireframe()` rendering mode without option parameter.")
    case iconBlueprint
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SmartlookAnalytics.RenderingMode.Option, b: SmartlookAnalytics.RenderingMode.Option) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: SmartlookAnalytics.RenderingMode, b: SmartlookAnalytics.RenderingMode) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension SmartlookAnalytics.RenderingMode {
  public static let `default`: SmartlookAnalytics.RenderingMode
}
extension SmartlookAnalytics.RenderingMode.Option {
  @available(*, deprecated, message: "Replaced by `.wireframe()` option in `RenderingMode`.")
  public static let `default`: SmartlookAnalytics.RenderingMode.Option
}
extension SwiftUI.View {
  public func smartlookSensitive(_ sensitive: Swift.Bool = true) -> some SwiftUI.View
  
}
@_hasMissingDesignatedInitializers final public class Smartlook : Combine.ObservableObject {
  final public var state: SmartlookAnalytics.RuntimeState {
    get
  }
  final public var sensitivity: SmartlookAnalytics.Sensitivity {
    get
  }
  final public var user: SmartlookAnalytics.User {
    get
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension Foundation.URLSessionTask {
  @discardableResult
  public func intercept(interceptors: [any SmartlookAnalytics.NetworkInterceptor]? = nil) -> Foundation.URLSessionTask
}
extension SmartlookAnalytics.Smartlook {
  final public var setupConfiguration: SmartlookAnalytics.SetupConfiguration? {
    get
    set
  }
  @discardableResult
  final public func setupConfiguration(_ setupConfiguration: SmartlookAnalytics.SetupConfiguration?) -> SmartlookAnalytics.Smartlook
}
extension QuartzCore.CATransform3D : Swift.Codable, Swift.Equatable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
}
@objc(SLSkeletonFlagShadow) public enum SkeletonFlagShadow : Swift.Int {
  case none
  case light
  case dark
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SLBridgeWireframeSkeletonFlags) public class BridgeWireframeSkeletonFlags : ObjectiveC.NSObject {
  @objc public var shadow: SmartlookAnalytics.SkeletonFlagShadow
  public init(shadow: SmartlookAnalytics.SkeletonFlagShadow = .none)
  @available(swift, obsoleted: 0.1)
  @objc override convenience dynamic public init()
  @objc deinit
}
public protocol SensitiveData {
}
public protocol NonSensitiveData {
}
@_inheritsConvenienceInitializers @objc(SLBridgeWireframe) public class BridgeWireframe : ObjectiveC.NSObject {
  @objc public var root: SmartlookAnalytics.BridgeWireframeView?
  @objc public var width: Swift.Double
  @objc public var height: Swift.Double
  @objc override dynamic public init()
  public init(root: SmartlookAnalytics.BridgeWireframeView, width: Swift.Double = 0.0, height: Swift.Double = 0.0)
  @objc deinit
}
public class MaskBodyInterceptor : SmartlookAnalytics.NonBinaryBodyInterceptor {
  required public init(masks: [SmartlookAnalytics.InterceptorMask])
  override public func onIntercept(task: Foundation.URLSessionTask, responseData: Foundation.Data?, intercepted: SmartlookAnalytics.InterceptedTaskData?) -> SmartlookAnalytics.InterceptedTaskData?
  @objc deinit
}
public protocol CrashReports {
  var cacheFolderUrl: Foundation.URL { get }
  init?(cacheFolderUrl: Foundation.URL?)
  var enabled: Swift.Bool { get set }
  func crashes() -> [Foundation.Date : Foundation.URL]?
  func crashes(at folder: Foundation.URL?, in range: Swift.Range<Foundation.Date>?) -> [Foundation.Date : Foundation.URL]?
}
public class CrashReportsBridge : SmartlookAnalytics.CrashReports {
  final public let cacheFolderUrl: Foundation.URL
  required public init?(cacheFolderUrl: Foundation.URL?)
  public var enabled: Swift.Bool {
    get
    set
  }
  @objc deinit
}
extension SmartlookAnalytics.Region : Swift.Hashable {}
extension SmartlookAnalytics.SubviewType : Swift.Equatable {}
extension SmartlookAnalytics.SubviewType : Swift.Hashable {}
extension SmartlookAnalytics.SubviewType : Swift.RawRepresentable {}
extension SmartlookAnalytics.Status.Cause : Swift.Equatable {}
extension SmartlookAnalytics.Status.Cause : Swift.Hashable {}
extension SmartlookAnalytics.MaskElement.MaskType : Swift.Equatable {}
extension SmartlookAnalytics.MaskElement.MaskType : Swift.Hashable {}
extension SmartlookAnalytics.MaskElement.MaskType : Swift.RawRepresentable {}
extension SmartlookAnalytics.SkeletonType : Swift.Equatable {}
extension SmartlookAnalytics.SkeletonType : Swift.Hashable {}
extension SmartlookAnalytics.SkeletonType : Swift.RawRepresentable {}
extension SmartlookAnalytics.NavigationEventDirection : Swift.Equatable {}
extension SmartlookAnalytics.NavigationEventDirection : Swift.Hashable {}
extension SmartlookAnalytics.RenderingMode.Option : Swift.Hashable {}
extension SmartlookAnalytics.SkeletonFlagShadow : Swift.Equatable {}
extension SmartlookAnalytics.SkeletonFlagShadow : Swift.Hashable {}
extension SmartlookAnalytics.SkeletonFlagShadow : Swift.RawRepresentable {}
